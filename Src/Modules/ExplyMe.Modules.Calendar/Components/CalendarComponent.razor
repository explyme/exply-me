<div class="daysGrid text-center text-muted">
    <span>Domingo</span>
    <span>Segunda</span>
    <span>Terça</span>
    <span>Quarta</span>
    <span>Quinta</span>
    <span>Sexta</span>
    <span>Sábado</span>
</div>

<div class="daysGrid">
    @foreach (var day in Days)
    {
        <div @onclick="(() => HandleClick(day.Item1.GetValueOrDefault()))" class="p-2 calendarDay border @(day.Item1.GetValueOrDefault() < Now.Day ?"text-secondary bg-light" : "text-dark" )"
             style="@(day.Item1.GetValueOrDefault() < Now.Day ? "cursor: not-allowed" : "cursor: pointer" )">
            <span class="d-block">@day.Item1</span>
            <ul class="list-unstyled">
                @if (day.Item2 != null)
                {
                    @foreach (var dayEvent in day.Item2)
                    {
                        <li class="fw-bold" style="font-size: 12px">@dayEvent</li>
                    }
                }
            </ul>
        </div>
    }
</div>

<style>
    .daysGrid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-column-gap: 0px;
        grid-row-gap: 0px;
    }

    .calendarDay {
        min-height: 100px
    }

        .calendarDay:hover {
            background: var(--bs-light)
        }
</style>

@code {
    [Parameter]
    public Dictionary<int, List<string>> Events { get; set; } = new Dictionary<int, List<string>>();

    [Parameter]
    public EventCallback<int> OnValidDayClick { get; set; }

    public List<(int?, List<string>)> Days { get; set; } = new List<(int?, List<string>)>();

    public DateTime Now { get; set; } = DateTime.UtcNow;

    protected override void OnInitialized()
    {
        var daysInMonth = DateTime.DaysInMonth(Now.Year, Now.Month);

        var firstMonthDayOfWeek = new DateTime(Now.Year, Now.Month, 1).DayOfWeek;

        CreatePrePreMonthPadding(firstMonthDayOfWeek);

        for (int i = 0; i < daysInMonth; i++)
        {
            Events.TryGetValue(i, out List<string> events);

            Days.Add((i + 1, events));
        }
    }

    private void CreatePrePreMonthPadding(DayOfWeek firstMonthDayOfWeek)
    {
        for (int i = 0; i < (int)firstMonthDayOfWeek; i++)
            Days.Add((null, null));
    }

    private void HandleClick(int day)
    {
        if (day < Now.Day) return;

        OnValidDayClick.InvokeAsync(day);
    }
}
