@page "/wallet"

@using ExplyMe.Modules.Wallet.Pages.Dashboard.Components

@attribute [Authorize]
@inject IWalletAccountService AccountService
@inject IWalletTransactionService TransactionService
@inject UserManager<User> UserManager

<GuaranteedWallet>
    <main class="mt-4 mb-5">
        <div class="row">
            <div class="col-3   ">
                <div class="d-grid gap-3">
                    <div class="card border-0 shadow">
                        <div class="card-header">
                            Saldo liberado
                        </div>
                        <div class="card-body">
                            <h3 class="fw-light">R$ @AvailableBalance</h3>
                        </div>
                    </div>

                    <div class="card border-0 shadow">
                        <div class="card-header">
                            Saldo bloqueado
                        </div>
                        <div class="card-body">
                            <h3 class="fw-light">R$ @BlockedBalance</h3>
                        </div>
                    </div>

                    <div class="card border-0 shadow">
                        <div class="card-header">
                            Saldo futuro
                        </div>
                        <div class="card-body">
                            <h3 class="fw-light">R$ @FutureBalance</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
                <TransactionList Transactions="Transactions" />
            </div>
        </div>
    </main>
</GuaranteedWallet>

@code {
    public static string Title => "Carteira";

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    public bool UserHasWallet { get; set; }

    public IEnumerable<WalletTransaction> Transactions { get; set; } = new List<WalletTransaction>();

    public string AvailableBalance => MoneyFormatter.Format(WalletAccount?.AvailableBalance ?? 0);
    public string BlockedBalance => MoneyFormatter.Format(WalletAccount?.BlockedBalance ?? 0);
    public string FutureBalance => MoneyFormatter.Format(WalletAccount?.FutureBalance ?? 0);

    public WalletAccount WalletAccount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userId = Convert.ToInt64(UserManager.GetUserId((await AuthState).User));
        var wallet = await AccountService.FindUserAccountsAsync(userId);

        if (wallet != null && wallet.Count() > 0)
        {
            WalletAccount = wallet.First();
            await TransactionService.DepositAsync(WalletAccount.Id, 100);

            Transactions = await TransactionService.FindByAccountAsync(WalletAccount.Id);
            //StateHasChanged();
        }
    }
}
