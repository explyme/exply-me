@page "/chatroom"


@inject IMessageCreator MessageCreator
@inject IMessageFinder MessageFinder
@inject UserManager<User> UserManager
@attribute [Authorize]

@if (!IsChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@ToUserName" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected To <b>@ToUserName</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>

    // display messages
    <div id="scrollbox">
        @foreach (var message in Messages)
        {
            {
                <div>
                    @if (@message.FromUser == 1)
                    {
                        <div class="user"><bold>Diego</bold></div>
                    }
                    @if (@message.FromUser == 2)
                    {
                        <div class="user"><bold>Inhago</bold></div>
                    }

                    <div class="msg">@message.Message</div>
                </div>
            }
        }
        <hr />
        <textarea class="form-control" placeholder="enter your comment" rows="3" @bind="@NewMessage"></textarea>
        <button class="d-block btn btn-outline-primary btn-sm mx-auto my-4" @onclick="@(() => SendAsync())">Enviar</button>
    </div>
}
<style>
    .user {
    font-size: 0.8em;
    font-weight: bold;
    color: #000;
}
</style>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    private bool IsChatting = false;

    private string ToUserName;

    private string NewMessage;

    private IEnumerable<MessageEntity> Messages = new List<MessageEntity>();
    private User CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserManager.GetUserAsync((await AuthState).User);
    }

    public async Task Chat()
    {   
        IsChatting = true;
        await Task.Delay(1);
        await LoadMessages();
    }

    private async Task DisconnectAsync()
    {
        if (IsChatting)
        {
            IsChatting = false;
        }
        await Task.Delay(1);
    }

    private async Task SendAsync()
    {
        if (IsChatting && !string.IsNullOrWhiteSpace(NewMessage))
        {
            var newMessage = new MessageEntity();


            newMessage.FromUser = CurrentUser.Id;
            newMessage.ToUser = CurrentUser.Id == 1 ? 2: 1;
            newMessage.Message = NewMessage;

            await MessageCreator.SendAsync(newMessage);
            await LoadMessages();
        }
    }
    private async Task LoadMessages()
    {
        var toUserId = CurrentUser.Id == 1 ? 2 : 1;
        var fromUserId = CurrentUser.Id;
        Messages = await MessageFinder.FindAllByFromUserIdAndToUserId(fromUserId, toUserId);
    }

}
